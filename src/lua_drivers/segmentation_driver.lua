-- print out a matrix
function print_matrix(n_columns, n_rows, data_table)
    local write = io.write
    for y=0,n_columns-1,1 do
        for x=1,n_rows,1 do
            write(data_table[x + y*n_rows])
            write' '
        end
        write'\n'
    end
end

-- segment an image into mono triangle & mono background
function segment_image(n_columns, n_rows, data_table)
    toCppSetSegmentationModeOptimised()
    local image_segmentation = toCppSegmentImage(nx,ny,data_table)
    -- TODO: Fix x<->y ordering at the lua-cpp bridge so it's less awkward with indexing
    local seg_upper_left = {image_segmentation[2], image_segmentation[1]}
    local seg_lower_right = {image_segmentation[4], image_segmentation[3]}
    local seg_inner_colour_rgb = {
        image_segmentation[5], image_segmentation[6], image_segmentation[7]
    }
    local seg_outer_colour_rgb = {
        image_segmentation[8], image_segmentation[9], image_segmentation[10]
    }

    print("==== Input Matrix: ====")
    print_matrix(n_columns,n_rows,data_table)
    print("==== Segmentation: ====")
    print(string.format("Upper left corner (x,y): [%d, %d]", seg_upper_left[1], seg_upper_left[2]))
    print(string.format("Lower right corner (x,y): [%d, %d]", seg_lower_right[1], seg_lower_right[2]))
    print(string.format("Seg rectangle RGB: (%.2f, %.2f, %.2f)", seg_inner_colour_rgb[1], seg_inner_colour_rgb[2], seg_inner_colour_rgb[3]))
    print(string.format("Seg background RGB: (%.2f, %.2f, %.2f)", seg_outer_colour_rgb[1], seg_outer_colour_rgb[2], seg_outer_colour_rgb[3]))
    print("")
end

-- main
local ny = 10
local nx = 10
local in_matrix = {
    0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04,
    0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 
    0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 
    0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 
    0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04,
    0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 
    0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 
    0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 
    0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04,
    0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 
    0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 
    0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 
    0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04,
    0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 
    0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 
    0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 
    0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04,
    0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 
    0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 
    0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 
    0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04,
    0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 
    0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 
    0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 
    0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04, 0.12, 0.14, 0.04,
    0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 0.11, 0.99, 0.95, 
    0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 
    0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 
    0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 0.45, 0.67, 0.56, 
    0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52, 0.76, 0.15, 0.52
}

segment_image(ny, nx, in_matrix)